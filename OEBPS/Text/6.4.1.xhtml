<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/Style.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <h3 id="6-4-1-">6.4.1　双亲表示法</h3>

  <p>我们人可能因为种种原因，没有孩子，但无论是谁都不可能是从石头里蹦出来的，孙悟空显然不能算是人，所以是人一定会有父母。树这种结构也不例外，除了根结点外，其余每个结点，它不一定有孩子，但是一定有且仅有一个双亲。</p>

  <p>我们假设以一组连续空间存储树的结点，同时在每个结点中，附设一个指示器指示其双亲结点在数组中的位置。也就是说，每个结点除了知道自己是谁以外，还知道它的双亲在哪里。它的结点结构为表6-4-1所示。</p>

  <p>表6-4-1</p>

  <table>
    <thead>
      <tr>
        <td></td>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>data</td>

        <td>parent</td>
      </tr>
    </tbody>
  </table>

  <p>其中data是数据域，存储结点的数据信息。而parent是指针域，存储该结点的双亲在数组中的下标。</p>

  <p>以下是我们的双亲表示法的结点结构定义代码。</p>
  <pre>
/* 树的双亲表示法结点结构定义 */
#define MAX_TREE_SIZE 100
/* 树结点的数据类型，目前暂定为整型 */
typedef int TElemType;              
/* 结点结构 */
typedef struct PTNode               
{
    /* 结点数据 */
    TElemType data;                 
    /* 双亲位置 */
    int parent;                     
} PTNode;
/* 树结构 */
typedef struct                      
{
    /* 结点数组 */
    PTNode nodes[MAX_TREE_SIZE];    
    /* 根的位置和结点数 */
    int r, n;                       
} PTree;
</pre>

  <p>有了这样的结构定义，我们就可以来实现双亲表示法了。由于根结点是没有双亲的，所以我们约定根结点的位置域设置为-1，这也就意味着，我们所有的结点都存有它双亲的位置。如图6-4-1中的树结构和表6-4-2中的树双亲表示所示。</p>

  <p><img alt="" src="../Images/6-4-1.jpg" /></p>

  <p>图6-4-1</p>

  <p>表6-4-2</p>

  <table>
    <thead>
      <tr>
        <td></td>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>下标</td>

        <td>data</td>

        <td>parent</td>
      </tr>

      <tr>
        <td>0</td>

        <td>A</td>

        <td>-1</td>
      </tr>

      <tr>
        <td>1</td>

        <td>B</td>

        <td>0</td>
      </tr>

      <tr>
        <td>2</td>

        <td>C</td>

        <td>0</td>
      </tr>

      <tr>
        <td>3</td>

        <td>D</td>

        <td>1</td>
      </tr>

      <tr>
        <td>4</td>

        <td>E</td>

        <td>2</td>
      </tr>

      <tr>
        <td>5</td>

        <td>F</td>

        <td>2</td>
      </tr>

      <tr>
        <td>6</td>

        <td>G</td>

        <td>3</td>
      </tr>

      <tr>
        <td>7</td>

        <td>H</td>

        <td>3</td>
      </tr>

      <tr>
        <td>8</td>

        <td>I</td>

        <td>3</td>
      </tr>

      <tr>
        <td>9</td>

        <td>J</td>

        <td>4</td>
      </tr>
    </tbody>
  </table>

  <p>这样的存储结构，我们可以根据结点的parent指针很容易找到它的双亲结点，所用的时间复杂度为O(1)，直到parent为-1时，表示找到了树结点的根。可如果我们要知道结点的孩子是什么，对不起，请遍历整个结构才行。</p>

  <p>这真是麻烦，能不能改进一下呢？</p>

  <p>当然可以。我们增加一个结点最左边孩子的域，不妨叫它长子域，这样就可以很容易得到结点的孩子。如果没有孩子的结点，这个长子域就设置为-1，如表6-4-3所示。</p>

  <p><img alt="" src="../Images/6-0-1.jpg" /></p>

  <p>表6-4-3</p>

  <p>对于有0个或1个孩子结点来说，这样的结构是解决了要找结点孩子的问题了。甚至是有2个孩子，知道了长子是谁，另一个当然就是次子了。</p>

  <p>另外一个问题场景，我们很关注各兄弟之间的关系，双亲表示法无法体现这样的关系，那我们怎么办？嗯，可以增加一个右兄弟域来体现兄弟关系，也就是说，每一个结点如果它存在右兄弟，则记录下右兄弟的下标。同样的，如果右兄弟不存在，则赋值为-1，如表6-4-4所示。</p>

  <p><img alt="" src="../Images/6-0-2.jpg" /></p>

  <p>表6-4-4</p>

  <p>但如果结点的孩子很多，超过了2个。我们又关注结点的双亲、又关注结点的孩子、还关注结点的兄弟，而且对时间遍历要求还比较高，那么我们还可以把此结构扩展为有双亲域、长子域、再有右兄弟域。存储结构的设计是一个非常灵活的过程。一个存储结构设计得是否合理，取决于基于该存储结构的运算是否适合、是否方便，时间复杂度好不好等。注意也不是越多越好，有需要时再设计相应的结构。就像再好听的音乐，不停反复听上千遍也会腻味，再好看的电影，一段时间反复看上百遍，也会无趣，你们说是吧？</p>
</body>
</html>
