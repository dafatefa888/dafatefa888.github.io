<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/Style.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <h3 id="7-4-2-">7.4.2　邻接表</h3>

  <p>邻接矩阵是不错的一种图存储结构，但是我们也发现，对于边数相对顶点较少的图，这种结构是存在对存储空间的极大浪费的。比如说，如果我们要处理图7-4-5这样的稀疏有向图，邻接矩阵中除了arc[1][0]有权值外，没有其他弧，其实这些存储空间都浪费掉了。</p>

  <p><img alt="" src="../Images/7-4-5.jpg" /></p>

  <p>图7-4-5</p>

  <p>因此我们考虑另外一种存储结构方式。回忆我们在线性表时谈到，顺序存储结构就存在预先分配内存可能造成存储空间浪费的问题，于是引出了链式存储的结构。同样的，我们也可以考虑对边或弧使用链式存储的方式来避免空间浪费的问题。</p>

  <p>再回忆我们在树中谈存储结构时，讲到了一种孩子表示法，将结点存入数组，并对结点的孩子进行链式存储，不管有多少孩子，也不会存在空间浪费问题。这个思路同样适用于图的存储。我们把这种数组与链表相结合的存储方法称为邻接表（Ad-jacency List）。</p>

  <p>邻接表的处理办法是这样。</p>

  <p>1.图中顶点用一个一维数组存储，当然，顶点也可以用单链表来存储，不过数组可以较容易地读取顶点信息，更加方便。另外，对于顶点数组中，每个数据元素还需要存储指向第一个邻接点的指针，以便于查找该顶点的边信息。<br />
  2.图中每个顶点v<sub>i</sub>的所有邻接点构成一个线性表，由于邻接点的个数不定，所以用单链表存储，无向图称为顶点v<sub>i</sub>的边表，有向图则称为顶点v<sub>i</sub>作为弧尾的出边表。</p>

  <p>例如图7-4-6所示的就是一个无向图的邻接表结构。</p>

  <p><img alt="" src="../Images/7-4-6.jpg" /></p>

  <p>图7-4-6</p>

  <p>从图中我们知道，顶点表的各个结点由data和firstedge两个域表示，data是数据域，存储顶点的信息，firstedge是指针域，指向边表的第一个结点，即此顶点的第一个邻接点。边表结点由adjvex和next两个域组成。adjvex是邻接点域，存储某顶点的邻接点在顶点表中的下标，next则存储指向边表中下一个结点的指针。比如v<sub>1</sub>顶点与v<sub>0</sub>、v<sub>2</sub>互为邻接点，则在v<sub>1</sub>的边表中，adjvex分别为v<sub>0</sub>的0和v<sub>2</sub>的2。</p>

  <p>这样的结构，对于我们要获得图的相关信息也是很方便的。比如我们要想知道某个顶点的度，就去查找这个顶点的边表中结点的个数。若要判断顶点v<sub>i</sub>到v<sub>j</sub>是否存在边，只需要测试顶点v<sub>i</sub>的边表中adjvex是否存在结点v<sub>j</sub>的下标j就行了。若求顶点的所有邻接点，其实就是对此顶点的边表进行遍历，得到的adjvex域对应的顶点就是邻接点。</p>

  <p>若是有向图，邻接表结构是类似的，比如图7-4-7中第一幅图的邻接表就是第二幅图。但要注意的是有向图由于有方向，我们是以顶点为弧尾来存储边表的，这样很容易就可以得到每个顶点的出度。但也有时为了便于确定顶点的入度或以顶点为弧头的弧，我们可以建立一个有向图的逆邻接表，即对每个顶点v<sub>i</sub>都建立一个链接为v<sub>i</sub>为弧头的表。如图7-4-7的第三幅图所示。</p>

  <p><img alt="" src="../Images/7-4-7.jpg" /></p>

  <p>图7-4-7</p>

  <p>此时我们很容易就可以算出某个顶点的入度或出度是多少，判断两顶点是否存在弧也很容易实现。</p>

  <p>对于带权值的网图，可以在边表结点定义中再增加一个weight的数据域，存储权值信息即可，如图7-4-8所示。</p>

  <p><img alt="" src="../Images/7-4-8.jpg" /></p>

  <p>图7-4-8</p>

  <p>有了这些结构的图，下面关于结点定义的代码就很好理解了。</p>
  <pre>
/* 顶点类型应由用户定义 */
typedef char VertexType;          
/* 边上的权值类型应由用户定义 */
typedef int EdgeType;             
/* 边表结点 */
typedef struct EdgeNode           
{
    /* 邻接点域，存储该顶点对应的下标 */
    int adjvex;                   
    /* 用于存储权值，对于非网图可以不需要 */
    EdgeType weight;              
    /* 链域，指向下一个邻接点　 */
    struct EdgeNode *next;        
} EdgeNode;
/* 顶点表结点 */
typedef struct VertexNode         
{
    /* 顶点域，存储顶点信息 */
    VertexType data;              
    /* 边表头指针 */
    EdgeNode *firstedge;          
} VertexNode, AdjList[MAXVEX];
typedef struct
{
    AdjList adjList;
    /* 图中当前顶点数和边数 */
    int numVertexes, numEdges;    
} GraphAdjList;
</pre>

  <p>对于邻接表的创建，也就是顺理成章之事。无向图的邻接表创建代码如下。</p>
  <pre>
/* 建立图的邻接表结构 */
void  CreateALGraph(GraphAdjList *G)
{
    int i, j, k;
    EdgeNode *e;
    printf("输入顶点数和边数:\n");
    /* 输入顶点数和边数 */
    scanf("%d,%d", &amp;G-&gt;numVertexes, 
          &amp;G-&gt;numEdges);    
    /* 读入顶点信息，建立顶点表 */
    for (i = 0; i &lt; G-&gt;numVertexes; i++)              
    {
        /* 输入顶点信息 */
        scanf(&amp;G-&gt;adjList[i].data);                   
        /* 将边表置为空表 */
        G-&gt;adjList[i].firstedge = NULL;               
    }
    /* 建立边表 */
    for (k = 0; k &lt; G-&gt;numEdges; k++)                 
    {
        printf("输入边(vi,vj)上的顶点序号:\n");
        /* 输入边(vi,vj)上的顶点序号 */
        scanf("%d,%d", &amp;i, &amp;j);                       
        /* 向内存申请空间， */
        /* 生成边表结点 */
        e = (EdgeNode *)malloc(sizeof(EdgeNode));     
        /* 邻接序号为j */
        e-&gt;adjvex = j;                                
        /* 将e指针指向当前顶点指向的结点 */
        e-&gt;next = G-&gt;adjList[i].firstedge;            
        /* 将当前顶点的指针指向e */
        G-&gt;adjList[i].firstedge = e;                  
        /* 向内存申请空间， */
        /* 生成边表结点 */
        e = (EdgeNode *)malloc(sizeof(EdgeNode));     
        /* 邻接序号为i */
        e-&gt;adjvex = i;                                
        /* 将e指针指向当前顶点指向的结点 */
        e-&gt;next = G-&gt;adjList[j].firstedge;            
        /* 将当前顶点的指针指向e */
        G-&gt;adjList[j].firstedge = e;                  
    }
}
</pre>

  <p>这里加粗代码，是应用了我们在单链表创建中讲解到的头插法，由于对于无向图，一条边对应都是两个顶点，所以在循环中，一次就针对i和j分别进行了插入。本算法的时间复杂度，对于n个顶点e条边来说，很容易得出是O(n+e)。</p>
</body>
</html>
